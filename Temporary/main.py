"""
    @file                    main.py
    @author                  Daniel Gonzalez
    @author                  Nolan Clapp
    @author                  Caleb Kephart
    @date                    February 7, 2022
"""

import gc
import pyb
import cotask
import task_share
import EncoderDriver
import Encoder
import REncoder
import MotorDriver
import SingleMotorDriver
import ClosedLoop
import ThetaMotorControl
import RMotorControl
import ServoMotorF
import LimitSwitch
import GcodeInterpreter 
import theta_r_values
import pyb
import time

## MOTOR PIN STUFF
##Motor 1, Theta
en_pin=pyb.Pin (pyb.Pin.board.PA10, pyb.Pin.OUT_PP)
in1pin=pyb.Pin (pyb.Pin.board.PB4, pyb.Pin.OUT_PP)
in2pin=pyb.Pin (pyb.Pin.board.PB5, pyb.Pin.OUT_PP)
timer=3

##Motor 2, R
en_pin2=pyb.Pin (pyb.Pin.board.PC1, pyb.Pin.OUT_PP)
in1pin2=pyb.Pin (pyb.Pin.board.PA0, pyb.Pin.OUT_PP)
in2pin2=pyb.Pin (pyb.Pin.board.PA1, pyb.Pin.OUT_PP)
timer2=5


##ENCODER PIN STUFF
ENCpin1=pyb.Pin (pyb.Pin.board.PB6)
ENCpin2=pyb.Pin (pyb.Pin.board.PB7)
timernumber=4

ENC2pin1=pyb.Pin (pyb.Pin.board.PC6)
ENC2pin2=pyb.Pin (pyb.Pin.board.PC7)
timernumber2=8

## SHARES
duty1 = task_share.Share ('f', thread_protect = False, name = "Duty_1")
duty2 = task_share.Share ('f', thread_protect = False, name = "Duty_2")
EncPosition = task_share.Share ('h', thread_protect = False, name = "Position_1")
EncPosition2 = task_share.Share ('h', thread_protect = False, name = "Position_2")
Kp1 = task_share.Share ('f', thread_protect = False, name = "Porportional_Gain1")
Kp2 = task_share.Share ('f', thread_protect = False, name = "Porportional_Gain2")
setpoint1 = task_share.Share ('f', thread_protect = False, name = "Set_Point1")
setpoint2 = task_share.Share ('f', thread_protect = False, name = "Set_Point2")

xpos = task_share.Share ('h', thread_protect = False, name = "X_Position")
ypos = task_share.Share ('h', thread_protect = False, name = "Y_Position")
zpos = task_share.Share ('h', thread_protect = False, name = "z_Position")

Rswitch = task_share.Share ('h', thread_protect = False, name = "R_Switch")
Tswitch = task_share.Share ('h', thread_protect = False, name = "T_Switch")


# ThetaArray= task_share.Share ('h', thread_protect = False, name = "ThetaArray")
# RArray= task_share.Share ('g', thread_protect = False, name = "RArray")

#Theta= task_share.Share ('l', thread_protect = False, name = "Theta")
#R= task_share.Share ('l', thread_protect = False, name = "R")
#theta = [-70.52049726787894, -70.5468603141267, -70.57100944354356, -70.58266763233765, -70.59298633854159, -70.61369636985314, -70.6230417768013, -70.64211346004396, -70.65020966357281, -70.65862888253746, -70.66735386544545, -70.67517779247945, -70.68304741326014, -70.69124391435591, -70.69874421548941, -70.69866580563335, -70.7067021534154, -70.71414448350846, -70.72201070687991, -70.72926313367412, -70.73714606944115, -70.74458286540626, -70.75242413208103, -70.76795784417101, -70.7760860436397, -70.78414089809095, -70.80077533961935, -70.80913405456326, -70.94552227095147, -70.94909879601192, -70.95252571140185, -71.08092138263186, -71.21080775922094, -71.16927408716477, -71.00010863119002, -70.74510316903473, -70.73852288258514, -70.73169487754733, -70.72496622583701, -70.7181343567377, -70.7111502716338, -70.70435306048287, -70.6974665294462, -70.69061432078591, -70.68365257216232, -70.67042100599875, -70.65749138999125, -70.64461970999984, -70.31174024181111, -70.29937446240477, -70.27260100916229, -70.25848893082284, -70.24433607375902, -70.23084591726838, -70.21701046427802, -70.20472864957412, -70.1933620115095, -70.18406252302081, -70.17748054033025, -70.17396974761107, -70.1746192440394, -70.17940511177778, -70.18775859727943, -70.5889453255554, -70.45919222209069, -70.45137557719852, -70.35240292080286, -69.62819046879456, -69.611780991062, -69.59758328244031, -69.57352896822614, -69.56369086354198, -69.5630545593955, -69.55615890544476, -69.5503669495381, -69.54634814230685, -69.54698336872048, -69.54467295574008, -69.54367004761568, -69.54324983392866, -69.54458345679987, -69.5473940375497, -69.55168847806813, -69.55711918469675, -69.56372867309712, -69.57273169181555, -69.58333671557048, -69.5942089671337, -69.60576802769833, -69.62137488676412, -69.63450512926076, -69.65186096389259, -69.66930016246283, -69.68891320990058, -69.70949044335035, -69.73102255812226, -69.75434092718314, -69.77906604160755, -69.77884730875374, -69.80235100312136, -69.85565635136439, -70.52049726787894, -70.76768249788631, -70.78906930880584, -70.78890947029527, -70.80834075939387, -70.81764468282914, -70.82637159624177, -70.84422646419426, -70.85294005126691, -70.861558368324, -70.8697933841175, -70.87772367469425, -70.89487693744482, -70.9026363206485, -70.91025923754235, -70.91832936862694, -70.92645339411645, -70.93494916780413, -70.95153905873632, -70.96744914298446, -70.98499701884266, -70.99356006080164, -70.99347180999534, -71.00259100924865, -71.02094970324875, -71.03024908021804, -71.25528091994009, -71.26403265793058, -71.27224382815257, -71.27993434337392, -71.28743991368493, -71.28747579664935, -71.29409178912331, -71.30081596989022, -71.30661718204753, -71.30658453013997, -71.31249443547577, -71.31760293230577, -71.31762349252905, -71.32201113033298, -71.32650843570856, -71.32653785456574, -71.33017968452432, -71.33350897226701, -71.3368695496173, -71.33947441718522, -71.33930050697502, -71.34191038254697, -71.34378548051838, -71.34538707435878, -71.34650391964972, -71.34736856511184, -71.34721817488116, -71.34762473417709, -71.34777619501338, -71.34772057248809, -71.34725925975525, -71.34648835003821, -71.343453601969, -71.3410741461921, -71.34123320975021, -71.33840006131408, -71.33524249337952, -70.8631526430379, -70.83390966440575, -70.83429743512208, -70.77374794660207, -70.77347259200522, -70.74130127113517, -70.70819965337378, -70.63605455092146, -70.59822908286446, -70.55772173526165, -70.51957468342333, -70.47783826528922, -70.43499768984555, -70.38932658325723, -70.38987331574113, -70.3458687365812, -70.34667319967353, -70.29757553853393, -70.25240926633748, -70.20119817623001, -70.15520425240355, -70.10442242639333, -70.05372193550082, -69.99997638416896, -69.94951028385229, -69.89587864715313, -69.84447062333679, -69.78928488925085, -69.73675987068574, -69.73775571568162, -69.63050493269239, -69.52685628678198, -69.47642824579461, -68.3956372370656, -68.35339023920665, -68.29005030653414, -68.26886102978557, -68.26609219637248, -68.2430763648342, -68.24582456417536, -68.24430254683882, -68.24901140532305, -68.25774508427729, -68.27608426758569, -68.29946621212831, -68.32467725194653, -68.32716712229781, -68.35753865250656, -68.39452612298105, -68.44039397838095, -68.4830750305668, -68.52739027028248, -68.58120836642422, -68.64339122891842, -68.69890607745431, -68.758836296944, -68.82284199370919, -68.8926872051917, -68.96127723228643, -69.11048879952357, -69.17759603268556, -69.25267166579371, -69.32681642873187, -69.4700857583527, -69.47047801833128, -69.54375211481711, -69.88165927357933, -70.26490166517125, -70.19866953513281, -70.15344228733355, -70.10864630976528, -70.0651337038944, -70.02688033797887, -70.00528982880782, -69.9999831284004, -69.99105650666009, -69.99059517008232, -69.99978637581464, -70.02658524602386, -70.20574097019855, -70.24846253518427, -70.2955062488774, -70.34340007108993, -70.39068149563832, -70.43419817982698, -70.4746067954454, -70.51082084852662, -70.54480598593614, -71.08733351455047, -71.09495109678353, -71.10094371763194, -71.10458730048344, -71.10482793534469, -71.1042878590739, -71.10113475974427, -71.09959055537915, -71.0907911709798, -71.07802724194995, -71.00231275636771, -70.98587592464996, -70.96971665401654, -70.95401917399451, -70.93922344700768, -70.9252199553435, -70.91218500190384, -70.89979905145265, -70.8702008620648, -70.64978011364511, -70.76768249788631, -70.38433674792091, -70.42483809222415, -70.44440100837717, -70.46982086376904, -70.48889059937093, -70.48876737487751, -70.50680715256874, -70.52471580340456, -70.54244407980116, -70.55990664949609, -70.57782592661007, -70.5948463039351, -70.60616092525014, -70.61774654962642, -70.62942100093478, -70.64079535416303, -70.65873156076715, -70.67611276061001, -70.68803526841225, -70.70028742313802, -70.70036078883432, -70.71831257131372, -70.7372378180176, -70.75649134102969, -70.7693644438913, -70.86220893984155, -70.86574218793717, -70.86931057965154, -70.88193237403827, -70.97534237985778, -71.00569009158478, -71.30381166165802, -71.24332237225612, -71.22160537287864, -71.21192789629751, -71.20000229924267, -71.19441482019802, -71.19253954825143, -71.19161545648028, -71.19059077459829, -71.06412682645352, -71.06230325258807, -71.06311211544713, -71.06567392791845, -71.26344469095888, -71.2802660519581, -71.3014146026985, -71.31634237724747, -71.32966206943155, -71.32964416145884, -71.3422276943358, -71.35440370016532, -71.35442659559284, -71.36492897368983, -71.37188154929385, -71.38083180349655, -71.38929797021774, -71.39471003181343, -71.39998993377374, -71.4065481480274, -71.41015569350589, -71.41001186509585, -71.41172035228527, -71.41474749992601, -71.41687258209261, -71.41865324450204, -71.419599772891, -71.42002510758994, -71.42003193922004, -71.41945115342656, -71.41885599801388, -71.41711695985758, -71.41322137575527, -71.4071808968027, -71.02219170744289, -70.9790697193201, -70.92859180340542, -70.85163110840496, -70.81681998896607, -70.75770070249447, -70.69118548572902, -70.63989289994787, -70.55996024044845, -70.46591344028288, -70.35719285262266, -70.2839212849486, -70.19787648402709, -70.11085424961192, -70.01129574316073, -69.85845805289382, -69.74298854445948, -69.49868964671057, -69.37636481212162, -69.2428371386014, -69.11326922335171, -68.91080201662345, -68.7791444036186, -68.65000016735439, -66.4760523595809, -66.36047525185795, -66.27132014036823, -66.22623692749961, -66.22201205001156, -66.22476425057606, -66.23709269187431, -66.24323329138736, -66.28265582885008, -66.27668514996746, -66.33163889720504, -66.40419470148235, -66.49448043169912, -66.60912567392862, -66.73093637422434, -66.8770078097556, -67.0228641870814, -67.20782880326395, -67.36596255333886, -67.53319411769652, -67.69773246494142, -67.86635818413804, -68.00989097715477, -68.15697104218457, -68.29822216635846, -68.43155498745992, -68.55972546207263, -68.68299797033558, -68.6827040786321, -68.79147717155163, -68.89990428913701, -68.99996924150496, -69.1823616511937, -69.60905777932642, -69.62691756855385, -69.63533489054045, -69.63301386733013, -69.16344628859434, -69.14102712821106, -69.11303955640929, -69.09239897284853, -69.07879343236526, -69.07192517309198, -69.0725125171065, -69.07221201864179, -69.07133760201809, -69.0770852502218, -69.08468608677182, -69.09484077062095, -69.10625298354938, -69.12123517809707, -69.13872379719412, -69.15651939559204, -69.17259892977918, -69.19062946133232, -69.21060967299607, -69.23002450007826, -69.2725300275321, -69.29436427438772, -69.31652327469156, -69.33816100784902, -69.3848329401875, -69.40700500401174, -69.45513530191438, -69.47945070565305, -69.50754883441408, -69.53399607321597, -69.56150048910618, -69.56128446101377, -69.61127917130146, -69.65982270789593, -69.6837083265401, -70.38433674792091]
#r = [666.4585638329352, 670.1282692856141, 673.2897063844817, 674.6683371666493, 675.7951434007512, 677.7320271685347, 678.4269445136648, 679.3758873550485, 679.5327053856186, 679.6340017265129, 679.4800227940888, 679.2478151242924, 678.8453714070511, 678.1888933933848, 677.4482511066828, 677.4144442616566, 676.4378596420421, 675.3074368157621, 673.9937782180333, 672.6077534886643, 670.8572216760566, 669.0683916516588, 667.016746406597, 662.5127690643267, 659.88532712447, 657.1424187277019, 651.0801275595503, 647.8574730323019, 596.3669880911341, 595.8390054795484, 596.4874803749967, 664.6988740949577, 626.4708014231342, 606.3599994745405, 508.5558643110175, 593.3755057973194, 595.5720635877638, 597.5416723495439, 598.9847362612301, 600.2366665735296, 601.1796122724126, 601.7138286298605, 602.0065177006503, 602.0408882617402, 601.7662688213153, 600.7066165322732, 599.1258192761876, 597.1060697516604, 558.7629627348143, 557.6964626697619, 555.076464650323, 553.4918061716404, 551.7032656344321, 549.799192409407, 547.6505431931574, 545.3441828903804, 542.8211492376163, 540.0638271124805, 537.1299627978523, 533.8485562486122, 530.52068769127, 527.2203791664467, 524.1671426614811, 412.677347163273, 401.1341795377469, 399.9486825026258, 374.4337940573569, 546.5394484755583, 550.9307754362944, 555.0878472740213, 563.1579578230336, 567.0688843982244, 567.0416205817285, 570.5366036500698, 574.0776485338931, 577.1779121338275, 577.2049748670497, 580.5059543900655, 583.4759172653854, 583.4579009602031, 586.1418237636852, 588.9420839195328, 591.3453862878719, 593.7502402618975, 595.8250467530871, 597.9881395799468, 600.1821702486011, 602.0118239092033, 603.5491042508892, 605.4539002361539, 606.8131512715556, 608.3812171330499, 609.7720040879468, 611.101436539057, 612.389969171894, 613.564827932243, 614.7096994768646, 615.7874406189476, 615.8523107247876, 616.7261301392286, 618.5220772145117, 666.4585638329352, 469.94715486002974, 473.54950380486656, 473.59678261744114, 476.49567729991526, 477.805905917519, 478.92138016074335, 480.85207289476523, 481.51826797420415, 482.1387380367505, 482.64881768811586, 482.9984901423188, 483.2111612338336, 483.1491009297465, 482.9484626522548, 482.5610192841658, 482.015147528852, 481.3687516281847, 479.6351487147671, 477.4749901796893, 474.4719556556039, 472.90287008341835, 472.8421753366245, 470.9800232315944, 466.9748563464679, 464.82210971615683, 419.5262490651381, 418.1241369542975, 416.6901589632479, 415.2400533541597, 413.7260790568233, 413.7954119668103, 412.3003904617523, 410.6984414123317, 409.2292609054598, 409.1595460008147, 407.4566305655747, 405.81283267350335, 405.8594459687032, 404.2344002647974, 402.3447062138462, 402.4147839148456, 400.69569293969664, 398.8948454245065, 396.73586365415406, 394.8969126656007, 394.8398324296854, 392.56961814004273, 390.44205824594667, 388.2203842983907, 385.89713295505163, 383.69353209513656, 383.7060665916435, 380.9602332990825, 380.94773378804985, 378.4825369960011, 375.51763044725385, 372.86804495228256, 366.64661655658745, 363.27784117899535, 363.2647801788639, 359.9811674386403, 356.60293491592233, 192.70376299593906, 189.83676466287, 189.79127686765196, 185.02058252786136, 185.05248629298566, 183.09688222691213, 181.43459890336402, 178.842735688626, 177.9410892077906, 177.27863887659592, 176.93088833362103, 176.82119776769096, 176.97745106911677, 177.34869879666428, 177.29072595233447, 177.85162808915837, 177.8924526316462, 178.8302004695339, 179.84810783553513, 181.20469614307032, 182.61087888498125, 184.37074309199247, 186.37522474313133, 188.65570713443373, 191.0044296753539, 193.7188555211663, 196.49884632081694, 199.72806381762868, 202.90782957370396, 202.92751582330047, 210.38747529493145, 218.58458336152086, 222.9727040777378, 329.14063208020076, 333.86008258563965, 342.70060343096526, 346.94050252647133, 346.92340552035085, 354.39106308867736, 354.40804522727643, 358.0800611515387, 361.3985315010498, 364.27710219542405, 367.19542277284546, 370.1025929026673, 372.340117368009, 372.3575127718809, 374.61428049399996, 376.78172320446174, 379.007042145264, 380.6584257850848, 382.21769341492137, 383.78409523421834, 385.36267273023776, 386.56676652015994, 387.7559399553528, 388.88880248386914, 389.8773030029685, 390.7944728280874, 392.4081028926694, 393.01218222182916, 393.5672507959515, 394.0870888169412, 394.98145697807064, 394.9148962542945, 395.3209020144173, 399.30879428492557, 324.9345322421277, 322.76713819545137, 321.2685778491211, 319.56550332903925, 317.3809224352977, 314.3703897194699, 311.548313285273, 310.49053385211505, 307.0050495884168, 305.9589426994738, 300.99758481093306, 295.63618844404493, 268.0772589103365, 263.10943798575016, 259.5534813961036, 257.48050881329556, 256.5730583436134, 256.6781324771227, 257.52054478840046, 258.8541978642431, 260.5429051607171, 358.36522580340954, 362.12787848171513, 366.2472127394786, 370.69847496838776, 374.2291484179644, 375.335371213761, 378.68042914586397, 379.63473912692314, 383.41794375230535, 386.5877804750572, 402.394311150666, 405.2170872070571, 406.5362453425852, 406.66175900549797, 405.65298370461494, 403.97113099722947, 401.73294201296267, 399.3009111407372, 392.6646299642085, 450.63582353425085, 469.94715486002974, 731.1139255437757, 735.4270054037863, 737.3632383196286, 739.5345759152628, 740.879917281512, 740.9359227651117, 741.939925449914, 742.6353945155835, 742.9091894640856, 742.8180947261249, 742.2261475118353, 741.125154439668, 740.1372632068671, 738.8169215082067, 737.2888371776555, 735.4931434864699, 732.1421299671765, 728.2362926065905, 725.1939748475662, 721.7708156591439, 721.8046569863923, 716.1511601045672, 709.5795569076425, 702.2168019509639, 696.8927439847321, 657.8791154685729, 657.2461839202984, 657.8100692660103, 662.5832660939279, 703.2848988662352, 720.508411875741, 632.0785065816766, 598.4882435046344, 587.894140655881, 583.2259037466573, 577.4247040907989, 574.544798566139, 573.2577204163316, 572.5090846221685, 571.3257594984797, 488.40674949568483, 486.681945424247, 484.82565954255205, 483.6089690937701, 443.6802263927939, 441.1272706280074, 437.4999060727812, 434.6840961486695, 431.8679987794978, 431.82124453950564, 428.76057281686417, 425.36294929140763, 425.4334719941794, 422.01081422041455, 419.5124774424239, 415.8742168811136, 411.7020083566828, 408.6768797846572, 405.3940462776127, 400.292689986019, 396.92440772962715, 396.9314509637363, 395.02820518870533, 391.2469997163821, 387.369528353566, 383.295710737928, 379.42704881399027, 374.8389410442437, 372.66103942431545, 368.18540078875435, 365.88786478862477, 361.05139481373436, 353.4067413744539, 345.20973425518287, 170.37169662974966, 164.63246010126554, 159.39830957562248, 153.78928624528731, 151.98068332243204, 149.6943358521621, 148.0150868101776, 147.2867435667239, 146.8419033864297, 147.21057586292065, 148.40327309787935, 149.62561634734078, 151.37738628175805, 153.407528059628, 156.06437923564627, 160.56847622771275, 164.24283149358703, 172.8989163620016, 177.64431862870038, 183.17186477482218, 188.84958997771972, 198.63590545918544, 205.56821994244348, 213.0372586726031, 367.03839644831146, 376.14942245210494, 385.9347701516176, 396.44390181638516, 396.43681909442347, 401.52834068071496, 406.68475002327733, 406.69540613827303, 412.0940338326857, 412.0832980090898, 417.39339147947055, 422.30972352851245, 427.27264121432603, 432.37785304223456, 436.8967538371536, 441.6562050563315, 445.75883335023025, 450.4351986715423, 454.1041995316486, 457.5044157599935, 460.4580367491259, 463.1857417475993, 465.2536357435185, 467.101603783005, 468.6794858129714, 469.9464739169795, 470.97741404275155, 471.854413384442, 471.9002968007212, 472.51864148381776, 473.0065966807299, 473.39709182364146, 473.9818280969012, 478.6295386668246, 479.5096327276458, 481.2462590366407, 482.78654831752436, 588.4726604482859, 594.6827446495425, 603.5436458071555, 612.1393712058331, 620.1564841123827, 627.5621870947222, 627.5770642881582, 632.5380128422735, 632.5157007595791, 639.088056971678, 643.504021351361, 647.7919849449805, 651.4928765263318, 655.2257061473001, 658.8411526473857, 662.0531485114194, 664.6494464236679, 667.2433312247495, 669.6629441958087, 671.8308902731503, 675.8445090650025, 677.5769923177721, 679.0922721715103, 680.4864138633891, 682.9536699360758, 683.9421466280706, 685.6115777993201, 686.2800938377346, 687.3985151381227, 688.3597629464678, 689.2451906235431, 689.3113234916639, 690.6868854945284, 691.6567303782376, 692.0497471200505, 731.1139255437757]
# Theta.put(theta)
# R.put(r)
setpoint1.put(90)     #Theta Setpoint (Degrees)
setpoint2.put(90)    #R setpoint (degrees) #Limit of 715
#xpos.put(4)
#ypos.put(4)

Kp1.put(1)
Kp2.put(1)      #Motor A

##OBJECTS
motor1=MotorDriver.MotorDriver(en_pin, en_pin2, in1pin, in2pin, in1pin2, in2pin2, timer, timer2,duty1,duty2)
#motor1=SingleMotorDriver.MotorDriver(en_pin,in1pin,in2pin,timer,duty1)
motor2=MotorDriver.MotorDriver(en_pin, en_pin2, in1pin, in2pin, in1pin2, in2pin2, timer, timer2,duty1,duty2)

ENC1=EncoderDriver.EncoderDriver(ENCpin1,ENCpin2,ENC2pin1,ENC2pin2,timernumber,timernumber2,EncPosition,EncPosition2)
#ENC2=EncoderDriver.EncoderDriver(ENCpin1,ENCpin2,ENC2pin1,ENC2pin2,timernumber,timernumber2,EncPosition,EncPosition2)
ENC2=REncoder.EncoderDriver(ENC2pin1,ENC2pin2,timernumber2,EncPosition2)
ThEnc=Encoder.Encoder(ENCpin1,ENCpin2,timernumber)
#ThEnc2=EncoderDriver.EncoderDriver(ENCpin1,ENCpin2,ENC2pin1,ENC2pin2,timernumber,timernumber2,EncPosition1,EncPosition2)

# Cl1=ClosedLoop.ClosedLoop(Kp1,Kp2,setpoint1,setpoint2,EncPosition,EncPosition2,duty1,duty2,time)
# Cl2=ClosedLoop.ClosedLoop(Kp1,Kp2,setpoint1,setpoint2,EncPosition,EncPosition2,duty1,duty2,time)

#For testing Without GCODE
# ThetaControl=ThetaMotorControl.ThetaClosedLoop(Kp1,setpoint1,EncPosition,duty1,xpos,ypos)
# RControl=RMotorControl.RClosedLoop(Kp2,setpoint2,EncPosition2,duty2,xpos,ypos)
ThetaControl=ThetaMotorControl.ThetaClosedLoop(Kp1,setpoint1,EncPosition,duty1)
RControl=RMotorControl.RClosedLoop(Kp2,setpoint2,EncPosition2,duty2)

servopin = pyb.Pin (pyb.Pin.board.PA7, pyb.Pin.OUT_PP)
servotimer =17
servoch = 1

switchpin1=pyb.Pin(pyb.Pin.board.PA8, pyb.Pin.IN, pyb.Pin.PULL_DOWN) #PB4
switchpin2=pyb.Pin(pyb.Pin.board.PA6, pyb.Pin.IN, pyb.Pin.PULL_DOWN)

Servo=ServoMotorF.ServoMotorF(servopin, servotimer, servoch)
LSwitch=ServoMotorF.LimitSwitch(switchpin1,switchpin2,duty2,Rswitch)

zpos.put(1)
theta=[]
r=[]
# Gcode=GcodeInterpreter.GcodeInterpreter(ThetaArray,RArray,setpoint1,setpoint2)
# Gcode.AIO('gcode.txt')
Gcode=theta_r_values.RTheta(setpoint1,setpoint2)

def task1_fun ():
    '''!
        runs tasks and functions for the first motor
    '''
    Gcode.cycle()
    while True:
        print(' ')
       

        #7 data points to use
        theta=[45,90, 90,90,90,90,45]
        r=[45,360,45,360,360,360,360]
        # for n in range(len(self.theta)):
        #     self.setpoint1.put(self.theta[n])
        #     # print(self.setpoint1.get())
        #     print('ThetaWorking')
        #     self.setpoint2.put(self.r[n])
        #     yield(self.setpoint1.get(),self.setpoint2.get())
        
        n=0
        n2=0
        #print('SP=45deg')
        setpoint1.put(theta[n])
            # print(self.setpoint1.get())
        
        setpoint2.put(r[n2])
            
        yield(setpoint1.get(),setpoint2.get())
        #print('GETTING HERE FINALLY')
        n+=1
        n2+=1
        setpoint1.put(theta[n])
        #print('ThetaWorking')
        setpoint2.put(r[n2])
        yield(setpoint1.get(),setpoint2.get())
        n+=1
        n2+=1
        setpoint1.put(theta[n])
        #print('ThetaWorking')
        setpoint2.put(r[n2])
        yield(setpoint1.get(),setpoint2.get())
        n+=1
        n2+=1
        setpoint1.put(theta[n])
        #print('ThetaWorking')
        setpoint2.put(r[n2])
        yield(setpoint1.get(),setpoint2.get())
        n+=1
        n2+=1
        setpoint1.put(theta[n])
        #print('ThetaWorking')
        setpoint2.put(r[n2])
        yield(setpoint1.get(),setpoint2.get())
        n+=1
        n2+=1
        setpoint1.put(theta[n])
        #print('ThetaWorking')
        setpoint2.put(r[n2])
        yield(setpoint1.get(),setpoint2.get())
        n+=1
        n2+=1
        setpoint1.put(theta[n])
        #print('ThetaWorking')
        setpoint2.put(r[n2])
        yield(setpoint1.get(),setpoint2.get())
        
        yield (0)
def task2_fun ():
  
    while True:
        #Theta Direction      
        ENC1.read()
        ThetaControl.control_loop1()
        motor1.set_duty_cycle(duty1.get())
        #R Direction
        ENC2.read()
        RControl.control_loop()
        motor2.set_duty_cycle2(duty2.get())
        
        yield(0)

def task3_fun():
    
    while True:  
        # LSwitch.checkswitch()
        LSwitch.checkswitch()  
        if zpos.get()==0:
            Servo.up()
            
        elif zpos.get()==1:
            Servo.down()  
        else: 
            pass
        yield (0)
        

if __name__=="__main__":
    while True:
        try:
            x = int(input())
            while True: 
                try: 
                    if x <= 10:
                        task1 = cotask.Task (task1_fun, name = 'Task_1', priority = 1, 
                                             period = .01, profile = True, trace = False)
                        task2 = cotask.Task (task2_fun, name = 'Task_2', priority = 2, 
                                             period = 40, profile = True, trace = False)
                        task3 = cotask.Task (task3_fun, name = 'Task_3', priority = 1, 
                                            period = 40, profile = True, trace = False)
                        
                        # task4 = cotask.Task (task3_fun, name = 'Task_4', priority = 3, 
                        #                      period = 20, profile = True, trace = False)
                        cotask.task_list.append (task1)
                        cotask.task_list.append (task2)
                        cotask.task_list.append (task3)
                        # cotask.task_list.append (task4)
                    
                        # Run the memory garbage collector to ensure memory is as defragmented as
                        # possible before the real-time scheduler is started
                        gc.collect ()
                    
                        # Run the scheduler with the chosen scheduling algorithm. Quit if any 
                        # character is received through the serial port
                        vcp = pyb.USB_VCP ()
                        while not vcp.any ():
                            cotask.task_list.pri_sched ()
                    
                        # Empty the comm port buffer of the character(s) just pressed
                        vcp.read ()
                        
                except KeyboardInterrupt:
                    break
        except :
            break
                
